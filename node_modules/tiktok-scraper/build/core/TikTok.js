"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_promise_1 = __importDefault(require("request-promise"));
const os_1 = require("os");
const fs_1 = require("fs");
const json2csv_1 = require("json2csv");
const ora_1 = __importDefault(require("ora"));
const bluebird_1 = require("bluebird");
const events_1 = require("events");
const socks_proxy_agent_1 = require("socks-proxy-agent");
const async_1 = require("async");
const constant_1 = __importDefault(require("../constant"));
const helpers_1 = require("../helpers");
const core_1 = require("../core");
class TikTokScraper extends events_1.EventEmitter {
    constructor({ download, filepath, filetype, proxy, asyncDownload, asyncScraping, cli = false, event = false, progress = false, input, number, type, by_user_id = false, store_history = false, historyPath = '', userAgent, test = false, noWaterMark = false, fileName, timeout = 0, bulk = false, }) {
        super();
        this.tacValue = '';
        this.storeValue = '';
        this.test = false;
        this.mainHost = 'https://m.tiktok.com/';
        this.userAgent = userAgent || constant_1.default.userAgent;
        this.download = download;
        this.filepath = process.env.SCRAPING_FROM_DOCKER ? '/usr/app/files' : filepath || '';
        this.json2csvParser = new json2csv_1.Parser({ flatten: true });
        this.filetype = filetype;
        this.input = input;
        this.proxy = proxy;
        this.number = number;
        this.asyncDownload = asyncDownload || 5;
        this.asyncScraping = () => {
            switch (this.scrapeType) {
                case 'user':
                case 'trend':
                    return 1;
                default:
                    return asyncScraping || 3;
            }
        };
        this.collector = [];
        this.event = event;
        this.scrapeType = type;
        this.cli = cli;
        this.spinner = ora_1.default('TikTok Scraper Started');
        this.byUserId = by_user_id;
        this.storeHistory = cli && download && store_history;
        this.historyPath = process.env.SCRAPING_FROM_DOCKER ? '/usr/app/files' : historyPath || os_1.tmpdir();
        this.fileName = () => {
            if (fileName) {
                return fileName;
            }
            switch (type) {
                case 'user':
                case 'hashtag':
                    return `${input}_${Date.now()}`;
                default:
                    return `${this.scrapeType}_${Date.now()}`;
            }
        };
        this.idStore = '';
        this.test = test;
        this.noWaterMark = noWaterMark;
        this.maxCursor = 0;
        this.noDuplicates = [];
        this.timeout = timeout;
        this.bulk = bulk;
        this.Downloader = new core_1.Downloader({
            progress,
            proxy,
            test,
            noWaterMark,
            userAgent,
            filepath,
            bulk,
        });
    }
    get getProxy() {
        if (Array.isArray(this.proxy)) {
            const selectProxy = this.proxy.length ? this.proxy[Math.floor(Math.random() * this.proxy.length)] : '';
            return {
                socks: false,
                proxy: selectProxy,
            };
        }
        if (this.proxy.indexOf('socks4://') > -1 || this.proxy.indexOf('socks5://') > -1) {
            return {
                socks: true,
                proxy: new socks_proxy_agent_1.SocksProxyAgent(this.proxy),
            };
        }
        return {
            socks: false,
            proxy: this.proxy,
        };
    }
    request({ uri, method, qs, body, form, headers, json, gzip }) {
        return new Promise(async (resolve, reject) => {
            const proxy = this.getProxy;
            const query = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ uri,
                method }, (qs ? { qs } : {})), (body ? { body } : {})), (form ? { form } : {})), { headers: Object.assign({ 'User-Agent': this.userAgent, referer: 'https://www.tiktok.com/' }, headers) }), (json ? { json: true } : {})), (gzip ? { gzip: true } : {})), { resolveWithFullResponse: true }), (proxy.proxy && proxy.socks ? { agent: proxy.proxy } : {})), (proxy.proxy && !proxy.socks ? { proxy: `http://${proxy.proxy}/` } : {})), { timeout: 10000 });
            try {
                const response = await request_promise_1.default(query);
                setTimeout(() => {
                    resolve(response.body);
                }, this.timeout);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    returnInitError(error) {
        if (this.cli && !this.bulk) {
            this.spinner.stop();
        }
        if (this.event) {
            this.emit('error', error);
        }
        else {
            throw error;
        }
    }
    async extractTac(uri = 'https://www.tiktok.com/discover') {
        const query = {
            uri,
            method: 'GET',
            headers: {
                accept: 'application/json, text/plain, */*',
                referer: 'https://www.tiktok.com/',
            },
            gzip: true,
        };
        try {
            const response = await this.request(query);
            const tacRegex = /<script>tac='([^]*)'<\/script>/.exec(response);
            if (tacRegex) {
                this.tacValue = tacRegex[1];
            }
            else {
                throw new TypeError("Can't extract Tac value");
            }
        }
        catch (error) {
            this.returnInitError(error.message);
        }
    }
    async scrape() {
        if (this.cli && !this.bulk) {
            this.spinner.start();
        }
        if (!this.scrapeType || constant_1.default.scrape.indexOf(this.scrapeType) === -1) {
            return this.returnInitError(`Missing scraping type. Scrape types: ${constant_1.default.scrape} `);
        }
        if (this.scrapeType !== 'trend' && !this.input) {
            return this.returnInitError('Missing input');
        }
        await this.extractTac();
        if (this.tacValue) {
            await this.mainLoop();
            if (this.event) {
                return this.emit('done', 'completed');
            }
            if (this.storeHistory) {
                await this.storeDownlodProgress();
            }
            if (this.noWaterMark) {
                await this.withoutWatermark();
            }
            const [json, csv, zip] = await this.saveCollectorData();
            return Object.assign(Object.assign(Object.assign(Object.assign({ collector: this.collector }, (this.download ? { zip } : {})), (this.filetype === 'all' ? { json, csv } : {})), (this.filetype === 'json' ? { json } : {})), (this.filetype === 'csv' ? { csv } : {}));
        }
    }
    withoutWatermark() {
        return new Promise(resolve => {
            async_1.forEachLimit(this.collector, 5, (item, cb) => {
                this.extractVideoId(item.videoUrl)
                    .then(video => {
                    if (video) {
                        item.videoUrlNoWaterMark = video;
                    }
                    cb(null);
                })
                    .catch(() => cb(null));
            }, () => {
                resolve();
            });
        });
    }
    async extractVideoId(uri) {
        try {
            const result = await request_promise_1.default({ uri });
            const position = Buffer.from(result).indexOf('vid:');
            if (position !== -1) {
                const id = Buffer.from(result)
                    .slice(position + 4, position + 36)
                    .toString();
                return `https://api2.musical.ly/aweme/v1/playwm/?video_id=${id}`;
            }
            throw new Error(`Cant extract video id`);
        }
        catch (error) {
            return '';
        }
    }
    mainLoop() {
        return new Promise(resolve => {
            let arrayLength = this.number % 27 ? Math.ceil(this.number / 27) : Math.ceil(this.number / 27) + 1;
            if (!this.number) {
                arrayLength = 1000;
            }
            const taskArray = Array.from({ length: arrayLength }, (v, k) => k + 1);
            async_1.forEachLimit(taskArray, this.asyncScraping(), (item, cb) => {
                switch (this.scrapeType) {
                    case 'user':
                        this.getUserId()
                            .then(query => this.submitScrapingRequest(query, this.maxCursor))
                            .then(() => cb(null))
                            .catch(error => cb(error));
                        break;
                    case 'hashtag':
                        this.getHashTagId()
                            .then(query => this.submitScrapingRequest(query, item === 1 ? 0 : (item - 1) * query.count))
                            .then(() => cb(null))
                            .catch(error => cb(error));
                        break;
                    case 'trend':
                        this.getTrendingFeedQuery()
                            .then(query => this.submitScrapingRequest(query, this.maxCursor))
                            .then(() => cb(null))
                            .catch(error => cb(error));
                        break;
                    case 'music':
                        this.getMusicFeedQuery()
                            .then(query => this.submitScrapingRequest(query, item === 1 ? 0 : (item - 1) * query.count))
                            .then(() => cb(null))
                            .catch(error => cb(error));
                        break;
                    default:
                        break;
                }
            }, () => {
                resolve();
            });
        });
    }
    async submitScrapingRequest(query, item) {
        try {
            const result = await this.scrapeData(query, item);
            if (result.statusCode !== 0) {
                throw new Error('No result');
            }
            await this.collectPosts(result.body.itemListData);
            if (!result.body.hasMore) {
                throw new Error('No more posts');
            }
            this.maxCursor = parseInt(result.body.maxCursor, 10);
        }
        catch (error) {
            throw error.message;
        }
    }
    async saveCollectorData() {
        if (this.download) {
            if (this.cli) {
                this.spinner.stop();
            }
            if (this.collector.length && !this.test) {
                await this.Downloader.zipIt({
                    collector: this.collector,
                    filepath: this.filepath,
                    fileName: this.fileName(),
                    asyncDownload: this.asyncDownload,
                });
            }
        }
        let json = '';
        let csv = '';
        let zip = '';
        if (this.collector.length) {
            json = this.filepath ? `${this.filepath}/${this.fileName()}.json` : `${this.fileName()}.json`;
            csv = this.filepath ? `${this.filepath}/${this.fileName()}.csv` : `${this.fileName()}.csv`;
            zip = this.filepath ? `${this.filepath}/${this.fileName()}.zip` : `${this.fileName()}.zip`;
            if (this.collector.length) {
                switch (this.filetype) {
                    case 'json':
                        await bluebird_1.fromCallback(cb => fs_1.writeFile(json, JSON.stringify(this.collector), cb));
                        break;
                    case 'csv':
                        await bluebird_1.fromCallback(cb => fs_1.writeFile(csv, this.json2csvParser.parse(this.collector), cb));
                        break;
                    case 'all':
                        await Promise.all([
                            await bluebird_1.fromCallback(cb => fs_1.writeFile(json, JSON.stringify(this.collector), cb)),
                            await bluebird_1.fromCallback(cb => fs_1.writeFile(csv, this.json2csvParser.parse(this.collector), cb)),
                        ]);
                        break;
                    default:
                        break;
                }
            }
        }
        if (this.cli) {
            this.spinner.stop();
        }
        return [json, csv, zip];
    }
    async storeDownlodProgress() {
        const historyType = this.scrapeType === 'trend' ? 'trend' : `${this.scrapeType}_${this.input}`;
        if (this.storeValue) {
            let history = {};
            try {
                const readFromStore = (await bluebird_1.fromCallback(cb => fs_1.readFile(`${this.historyPath}/tiktok_history.json`, { encoding: 'utf-8' }, cb)));
                history = JSON.parse(readFromStore);
            }
            catch (error) {
                history[historyType] = {
                    type: this.scrapeType,
                    input: this.input,
                    downloaded_posts: 0,
                    last_change: new Date(),
                    file_location: `${this.historyPath}/${this.storeValue}.json`,
                };
            }
            if (!history[historyType]) {
                history[historyType] = {
                    type: this.scrapeType,
                    input: this.input,
                    downloaded_posts: 0,
                    last_change: new Date(),
                    file_location: `${this.historyPath}/${this.storeValue}.json`,
                };
            }
            let store;
            try {
                const readFromStore = (await bluebird_1.fromCallback(cb => fs_1.readFile(`${this.historyPath}/${this.storeValue}.json`, { encoding: 'utf-8' }, cb)));
                store = JSON.parse(readFromStore);
            }
            catch (error) {
                store = [];
            }
            this.collector = this.collector.map(item => {
                if (store.indexOf(item.id) === -1) {
                    store.push(item.id);
                }
                else {
                    item.repeated = true;
                }
                return item;
            });
            this.collector = this.collector.filter(item => !item.repeated);
            history[historyType] = {
                type: this.scrapeType,
                input: this.input,
                downloaded_posts: history[historyType].downloaded_posts + this.collector.length,
                last_change: new Date(),
                file_location: `${this.historyPath}/${this.storeValue}.json`,
            };
            try {
                await bluebird_1.fromCallback(cb => fs_1.writeFile(`${this.historyPath}/${this.storeValue}.json`, JSON.stringify(store), cb));
            }
            catch (error) {
            }
            try {
                await bluebird_1.fromCallback(cb => fs_1.writeFile(`${this.historyPath}/tiktok_history.json`, JSON.stringify(history), cb));
            }
            catch (error) {
            }
        }
    }
    collectPosts(posts) {
        for (let i = 0; i < posts.length; i += 1) {
            if (this.number) {
                if (this.collector.length >= this.number) {
                    break;
                }
            }
            if (this.noDuplicates.indexOf(posts[i].itemInfos.id) === -1) {
                this.noDuplicates.push(posts[i].itemInfos.id);
                const item = {
                    id: posts[i].itemInfos.id,
                    text: posts[i].itemInfos.text,
                    createTime: posts[i].itemInfos.createTime,
                    authorMeta: {
                        id: posts[i].authorInfos.userId,
                        name: posts[i].authorInfos.uniqueId,
                        nickName: posts[i].authorInfos.nickName,
                        following: posts[i].authorStats.followingCount,
                        fans: posts[i].authorStats.followerCount,
                        heart: posts[i].authorStats.heartCount,
                        video: posts[i].authorStats.videoCount,
                        digg: posts[i].authorStats.diggCount,
                        verified: posts[i].authorInfos.verified,
                        private: posts[i].authorInfos.isSecret,
                        signature: posts[i].authorInfos.signature,
                        avatar: posts[i].authorInfos.coversMedium[0],
                    },
                    musicMeta: {
                        musicId: posts[i].itemInfos.musicId,
                        musicName: posts[i].musicInfos.musicName,
                        musicAuthor: posts[i].musicInfos.authorName,
                        musicOriginal: posts[i].musicInfos.original,
                        playUrl: posts[i].musicInfos.playUrl[0],
                    },
                    covers: {
                        default: posts[i].itemInfos.covers[0],
                        origin: posts[i].itemInfos.coversOrigin[0],
                        dynamic: posts[i].itemInfos.coversDynamic[0],
                    },
                    imageUrl: posts[i].itemInfos.coversOrigin[0],
                    webVideoUrl: `https://www.tiktok.com/@${posts[i].authorInfos.uniqueId}/video/${posts[i].itemInfos.id}`,
                    videoUrl: posts[i].itemInfos.video.urls[0],
                    videoUrlNoWaterMark: '',
                    videoMeta: posts[i].itemInfos.video.videoMeta,
                    diggCount: posts[i].itemInfos.diggCount,
                    shareCount: posts[i].itemInfos.shareCount,
                    playCount: posts[i].itemInfos.playCount,
                    commentCount: posts[i].itemInfos.commentCount,
                    downloaded: false,
                    hashtags: posts[i].challengeInfoList.map(({ challengeId, challengeName, text, coversLarger }) => ({
                        id: challengeId,
                        name: challengeName,
                        title: text,
                        cover: coversLarger,
                    })),
                };
                if (this.event) {
                    this.emit('data', item);
                    this.collector.push({});
                }
                else {
                    this.collector.push(item);
                }
            }
        }
    }
    async scrapeData(qs, maxCursor) {
        const shareUid = qs.type === 4 || qs.type === 5 ? '&shareUid=' : '';
        const signature = helpers_1.generateSignature(`${this.mainHost}share/item/list?secUid=${qs.secUid}&id=${qs.id}&type=${qs.type}&count=${qs.count}&minCursor=${qs.minCursor}&maxCursor=${maxCursor || 0}${shareUid}&lang=${qs.lang}&shareUid=${qs.shareUid}&verifyFp=${qs.verifyFp}`, this.userAgent, this.tacValue);
        this.storeValue = this.scrapeType === 'trend' ? 'trend' : qs.id;
        const query = {
            uri: `${this.mainHost}share/item/list`,
            method: 'GET',
            qs: Object.assign(Object.assign({}, qs), { _signature: signature, maxCursor: maxCursor || 0 }),
            headers: {
                accept: 'application/json, text/plain, */*',
                referer: 'https://www.tiktok.com/',
            },
            json: true,
        };
        try {
            const response = await this.request(query);
            if (response.statusCode === 0) {
                return response;
            }
            throw new Error('Not more posts');
        }
        catch (error) {
            throw error.message;
        }
    }
    async getTrendingFeedQuery() {
        return {
            id: '',
            secUid: '',
            shareUid: '',
            lang: '',
            type: 5,
            count: 30,
            minCursor: 0,
            verifyFp: '',
        };
    }
    async getMusicFeedQuery() {
        return {
            id: this.input,
            secUid: '',
            shareUid: '',
            lang: '',
            type: 4,
            count: 30,
            minCursor: 0,
            verifyFp: '',
        };
    }
    async getHashTagId() {
        if (this.idStore) {
            return {
                id: this.idStore,
                secUid: '',
                type: 3,
                count: 30,
                minCursor: 0,
                lang: '',
                verifyFp: '',
                shareUid: '',
            };
        }
        const query = {
            uri: `${this.mainHost}node/share/tag/${encodeURIComponent(this.input)}`,
            method: 'GET',
            json: true,
        };
        try {
            const response = await this.request(query);
            if (response.statusCode !== 0 || !response.body.challengeData) {
                throw new Error(`Can not find the hashtag: ${this.input}`);
            }
            this.idStore = response.body.challengeData.challengeId;
            return {
                id: response.body.challengeData.challengeId,
                secUid: '',
                type: 3,
                count: 30,
                minCursor: 0,
                lang: '',
                verifyFp: '',
                shareUid: '',
            };
        }
        catch (error) {
            throw error.message;
        }
    }
    async getUserId() {
        if (this.byUserId || this.idStore) {
            return {
                id: this.idStore ? this.idStore : this.input,
                secUid: '',
                type: 1,
                count: 30,
                minCursor: 0,
                lang: '',
                verifyFp: '',
                shareUid: '',
            };
        }
        const query = {
            uri: `${this.mainHost}node/share/user/@${encodeURIComponent(this.input)}`,
            method: 'GET',
            json: true,
        };
        try {
            const response = await this.request(query);
            if (response.statusCode !== 0 || !response.body.userData) {
                throw new Error(`Can not find the user: ${this.input}`);
            }
            this.idStore = response.body.userData.userId;
            return {
                id: response.body.userData.userId,
                secUid: '',
                type: 1,
                count: 30,
                minCursor: 0,
                lang: '',
                verifyFp: '',
                shareUid: '',
            };
        }
        catch (error) {
            throw error.message;
        }
    }
    async getUserProfileInfo() {
        if (!this.input) {
            throw `Username is missing`;
        }
        const query = {
            uri: `${this.mainHost}node/share/user/@${this.input}`,
            method: 'GET',
            json: true,
        };
        try {
            const response = await this.request(query);
            if (response.statusCode !== 0 || !response.body.userData) {
                throw new Error(`Can't find user: ${this.input}`);
            }
            return response.body.userData;
        }
        catch (error) {
            throw error.message;
        }
    }
    async getHashtagInfo() {
        if (!this.input) {
            throw `Hashtag is missing`;
        }
        const query = {
            uri: `${this.mainHost}node/share/tag/${this.input}`,
            method: 'GET',
            json: true,
        };
        try {
            const response = await this.request(query);
            if (response.statusCode !== 0 || !response.body.challengeData) {
                throw new Error(`Can't find hashtag: ${this.input}`);
            }
            return response.body.challengeData;
        }
        catch (error) {
            throw error.message;
        }
    }
    async signUrl() {
        if (!this.input) {
            throw `Url is missing`;
        }
        await this.extractTac();
        return helpers_1.generateSignature(this.input, this.userAgent, this.tacValue);
    }
    async getVideoMeta() {
        if (!this.input) {
            throw `Url is missing`;
        }
        if (!/^https:\/\/(www|v[a-z]{1})+\.tiktok\.com\/(\w.+|@(.\w.+)\/video\/(\d+))$/.test(this.input)) {
            throw `Not supported url format`;
        }
        const query = {
            uri: this.input,
            method: 'GET',
            json: true,
        };
        try {
            const response = await this.request(query);
            if (!response) {
                throw new Error(`Can't extract video meta data`);
            }
            const regex = /<script id="__NEXT_DATA__" type="application\/json" crossorigin="anonymous">([^]*)<\/script><script crossorigin="anonymous" nomodule=/.exec(response);
            if (regex) {
                const videoProps = JSON.parse(regex[1]);
                let videoItem = {};
                if (videoProps.props.pageProps.statusCode) {
                    throw new Error(`Can't find video: ${this.input}`);
                }
                videoItem = {
                    id: videoProps.props.pageProps.videoData.itemInfos.id,
                    text: videoProps.props.pageProps.videoData.itemInfos.text,
                    createTime: videoProps.props.pageProps.videoData.itemInfos.createTime,
                    authorMeta: {
                        id: videoProps.props.pageProps.videoData.itemInfos.authorId,
                        name: videoProps.props.pageProps.videoData.authorInfos.uniqueId,
                    },
                    musicMeta: {
                        musicId: videoProps.props.pageProps.videoData.musicInfos.musicId,
                        musicName: videoProps.props.pageProps.videoData.musicInfos.musicName,
                        musicAuthor: videoProps.props.pageProps.videoData.musicInfos.authorName,
                    },
                    imageUrl: videoProps.props.pageProps.videoData.itemInfos.coversOrigin[0],
                    videoUrl: videoProps.props.pageProps.videoData.itemInfos.video.urls[0],
                    videoUrlNoWaterMark: '',
                    videoMeta: videoProps.props.pageProps.videoData.itemInfos.video.videoMeta,
                    covers: {
                        default: videoProps.props.pageProps.videoData.itemInfos.covers[0],
                        origin: videoProps.props.pageProps.videoData.itemInfos.coversOrigin[0],
                    },
                    diggCount: videoProps.props.pageProps.videoData.itemInfos.diggCount,
                    shareCount: videoProps.props.pageProps.videoData.itemInfos.shareCount,
                    playCount: videoProps.props.pageProps.videoData.itemInfos.playCount,
                    commentCount: videoProps.props.pageProps.videoData.itemInfos.commentCount,
                    downloaded: false,
                    hashtags: videoProps.props.pageProps.videoData.challengeInfoList.map(({ challengeId, challengeName, text, coversLarger }) => ({
                        id: challengeId,
                        name: challengeName,
                        title: text,
                        cover: coversLarger,
                    })),
                };
                try {
                    const video = await this.extractVideoId(videoItem.videoUrl);
                    videoItem.videoUrlNoWaterMark = video;
                }
                catch (error) {
                }
                return videoItem;
            }
            throw new Error(`Can't extract video meta data`);
        }
        catch (error) {
            throw error.message;
        }
    }
}
exports.TikTokScraper = TikTokScraper;
